using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Vcc.SocialNet.UserService.Common;

namespace Vcc.SocialNet.UserService.Service.ViewModels
{  
    /// <summary>
    /// Represent a User object
    /// </summary>        
    public partial class User : IEquatable<User>
    {
        public int? Id { get; set; }
        [MaxLength(200)]
        public string Email { get; set; }
        [Required]
        [MaxLength(60)]
        public string LastName { get; set; }
        [Required]
        [MaxLength(60)]
        public string FirstName { get; set; }
        [Required]
        public DateTime DateOfBirth { get; set;}
        [Required]
        public GenderEnum Gender { get; set; }
        [Required]
        public PositionEnum Position { get; set; }
        [MaxLength(15)]
        public string CellPhone { get; set; }
        [MaxLength(15)]
        public string HomePhone { get; set; }
        [MaxLength(15)]
        public string City { get; set; }
        [MaxLength(2)]
        public string Province { get; set; }
        [MaxLength(100)]
        public string Address { get; set; }
        [MaxLength(10)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserProfile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) &&
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

// The following is the code generated by NSwag
//[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
//public partial class User
//{
//    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
//    public long Id { get; set; }

//    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
//    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//    public string Name { get; set; }

//    [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//    public string LastName { get; set; }

//    public string ToJson()
//    {
//        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
//    }

//    public static User FromJson(string data)
//    {
//        return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
//    }

//}